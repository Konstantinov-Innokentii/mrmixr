// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Konstantinov-Innokentii/mrmixr/api/models"
)

// UpdateCheckOKCode is the HTTP code returned for type UpdateCheckOK
const UpdateCheckOKCode int = 200

/*UpdateCheckOK OK

swagger:response updateCheckOK
*/
type UpdateCheckOK struct {
}

// NewUpdateCheckOK creates UpdateCheckOK with default headers values
func NewUpdateCheckOK() *UpdateCheckOK {

	return &UpdateCheckOK{}
}

// WriteResponse to the client
func (o *UpdateCheckOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*UpdateCheckDefault General errors

swagger:response updateCheckDefault
*/
type UpdateCheckDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateCheckDefault creates UpdateCheckDefault with default headers values
func NewUpdateCheckDefault(code int) *UpdateCheckDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateCheckDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update check default response
func (o *UpdateCheckDefault) WithStatusCode(code int) *UpdateCheckDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update check default response
func (o *UpdateCheckDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update check default response
func (o *UpdateCheckDefault) WithPayload(payload *models.Error) *UpdateCheckDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update check default response
func (o *UpdateCheckDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCheckDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
